from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import os
import base64
import argparse

# Generate a key from a password
def derive_key(password: str, salt: bytes):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# Encrypt a file
def encrypt_file(input_file, output_file, password):
    salt = os.urandom(16)
    key = derive_key(password, salt)
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    
    with open(input_file, 'rb') as f:
        plaintext = f.read()
    
    padding_length = 16 - (len(plaintext) % 16)
    plaintext += bytes([padding_length]) * padding_length
    ciphertext = encryptor.update(plaintext) + encryptor.finalize()
    
    with open(output_file, 'wb') as f:
        f.write(salt + iv + ciphertext)
    print("Encryption successful!")

# Decrypt a file
def decrypt_file(input_file, output_file, password):
    with open(input_file, 'rb') as f:
        data = f.read()
    
    salt, iv, ciphertext = data[:16], data[16:32], data[32:]
    key = derive_key(password, salt)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    padding_length = plaintext[-1]
    plaintext = plaintext[:-padding_length]
    
    with open(output_file, 'wb') as f:
        f.write(plaintext)
    print("Decryption successful!")

def main():
    parser = argparse.ArgumentParser(description="AES-256 File Encryption Tool")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode: encrypt or decrypt")
    parser.add_argument("input_file", help="Input file path")
    parser.add_argument("output_file", help="Output file path")
    parser.add_argument("password", help="Password for encryption/decryption")
    
    args = parser.parse_args()
    
    if args.mode == "encrypt":
        encrypt_file(args.input_file, args.output_file, args.password)
    elif args.mode == "decrypt":
        decrypt_file(args.input_file, args.output_file, args.password)

if __name__ == "__main__":
    main()
